var searchIndex = JSON.parse('{\
"ataabu":{"doc":"","t":[3,3,3,11,11,11,11,11,11,0,11,11,12,12,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,12,12,12,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5],"n":["ProcessedString","Token","WholePositionToken","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","c_like_sexp","clone","clone_into","col_no","col_no","descendants","descendants","descendants","fmt","fmt","fmt","from","from","from","get_float","get_integer","height","height","height","into","into","into","is_succeed","line_no","line_no","main","match_range","matched","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","remained","to_owned","token_str","token_type","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","convert_c_sexp_to_c","generate_exec_str","generate_incl_str","generate_op_str","generate_stmts_str","main"],"q":["ataabu","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ataabu::c_like_sexp","","","","",""],"d":["Storing the processed string","Token-storing struct.","The struct storing current current whole line number and …","","","","","","","","","","","","","","","","","","","","","get_float token from a input string and return the float …","get_integer token from a input string and return the …","","","","","","","","","","","input the char as a <code>String</code> with min index, and the char …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,2,3,1,2,3,0,1,1,2,3,1,2,3,1,2,3,1,2,3,0,0,1,2,3,1,2,3,1,2,3,0,0,1,1,2,3,1,2,3,1,2,3,1,2,3,1,1,2,2,1,2,3,1,2,3,1,2,3,0,0,0,0,0,0],"f":[null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["processedstring",3]],[[]],null,null,[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["wholepositiontoken",3],["string",3]]],[[["wholepositiontoken",3],["string",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],null,null,null,[[]],[[["string",3],["processedstring",3]],["processedstring",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["node",3]],["string",3]],[[["node",3]],["string",3]],[[["node",3]],["string",3]],[[["node",3]],["string",3]],[[["node",3]],["string",3]],[[],["result",6]]],"p":[[3,"ProcessedString"],[3,"Token"],[3,"WholePositionToken"]]},\
"trees":{"doc":"General purpose tree library. See the trees book for more.","tn":["bfs","forest","into_iter","iter","iter_rc","node","notation","rc","size","tree","tuple","walk","Bfs","BfsForest","BfsTree","Forest","Item","Iter","Split","Splitted","Tree","Visit","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","data","descendants","descendants","descendants","descendants","descendants","eq","fmt","fmt","forest_iter","from","from","from","from","from","from","from","from","height","height","height","height","height","into","into","into","into","into","into_iter","iter","iter","iter","iter_and_size","map","map","ne","next","postorder","postorder","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","size","size","size","split","tree_iter","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","wrap","wrap","Forest","append","back","back_mut","bfs","bfs_mut","borrow","borrow_mut","clone","clone_into","cmp","default","degree","descendants","drop","eq","fmt","fmt","from","from","from","from_tuple","front","front_mut","has_no_child","hash","height","into","into_bfs","into_iter","iter","iter_mut","ne","new","node_count","partial_cmp","pop_back","pop_front","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","prepend","push_back","push_front","sub","sub","sub","sub","to_owned","to_string","try_from","try_into","type_id","IntoIter","borrow","borrow_mut","descendants","drop","from","height","into","into_iter","next","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","size_hint","try_from","try_into","type_id","Iter","IterMut","borrow","borrow","borrow_mut","borrow_mut","descendants","descendants","fmt","fmt","from","from","height","height","into","into","into_iter","into_iter","next","next","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","size_hint","size_hint","try_from","try_from","try_into","try_into","type_id","type_id","IterRc","borrow","borrow_mut","clone","clone_into","descendants","from","height","into","into_iter","next","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","size_hint","to_owned","try_from","try_into","type_id","Node","append","back","back_mut","bfs","bfs_children","bfs_children_mut","bfs_mut","borrow","borrow_mut","cmp","data","data_mut","deep_clone","deep_clone_forest","default","degree","descendants","detach","eq","fmt","fmt","from","front","front_mut","has_no_child","hash","height","insert_next_sib","insert_prev_sib","into","iter","iter_mut","ne","node_count","parent","partial_cmp","pop_back","pop_front","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","prepend","push_back","push_front","to_string","try_from","try_into","type_id","fr","tr","Piled","Piled","PiledRcNode","PiledWeakNode","RcNode","Scattered","Scattered","ScatteredRcNode","ScatteredWeakNode","WeakNode","append","back","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","data","data_mut","deep_clone","degree","descendants","descendants","descendants","descendants","descendants","descendants","detach","downgrade","drop","drop","eq","extend","fmt","fmt","from","from","from","from","from","from","from","front","has_no_child","hash","height","height","height","height","height","height","insert_next_sib","insert_prev_sib","into","into","into","into","into","into","into_tree","is_root","iter_rc","ne","node","node_count","node_mut","parent","partial_cmp","pop_back","pop_front","postorder","postorder","postorder","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","prepend","push_back","push_front","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upgrade","Size","add","add_assign","borrow","borrow_mut","clone","clone_into","default","degree","descendants","descendants","eq","fmt","from","height","into","ne","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","sub","sub_assign","to_owned","try_from","try_into","type_id","Tree","abandon","append","back_mut","bfs_children_mut","bfs_mut","borrow","borrow_mut","clone","clone_into","cmp","deref","descendants","div","div","div","div","div","drop","eq","fmt","fmt","from","from","from","from_tuple","front_mut","hash","height","into","into_bfs","into_iter","iter_mut","ne","neg","new","partial_cmp","pop_back","pop_front","postorder","postorder_with_size_hint","preorder","preorder_with_size_hint","prepend","push_back","push_front","root","root_mut","split","sub","sub","to_owned","to_string","try_from","try_into","type_id","Branch","Frame","Leaf","SIZE","SIZE","TupleForest","TupleTree","Visit","borrow","borrow_mut","clone","clone_into","cmp","descendants","descendants","descendants","eq","fmt","from","hash","height","height","height","into","ne","partial_cmp","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","to_owned","try_from","try_into","type_id","Begin","End","ForestWalk","Leaf","TreeWalk","Visit","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","descendants","descendants","descendants","eq","fmt","forward","forward","from","from","from","from","from","get","get","get_parent","get_parent","height","height","height","into","into","into","ne","next","next","node","postorder","postorder","postorder","postorder_with_size_hint","postorder_with_size_hint","postorder_with_size_hint","preorder","preorder","preorder","preorder_with_size_hint","preorder_with_size_hint","preorder_with_size_hint","revisit","revisit","to_child","to_child","to_owned","to_parent","to_parent","to_sib","to_sib","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["trees","","","","","","","","","","","","trees::bfs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trees::forest","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trees::into_iter","","","","","","","","","","","","","","","","","","trees::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trees::iter_rc","","","","","","","","","","","","","","","","","","","","trees::node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trees::notation","","trees::rc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trees::size","","","","","","","","","","","","","","","","","","","","","","","","","","","trees::tree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trees::tuple","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","trees::walk","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Breadth first search.","Composed of a list of <code>Node</code>s as its children.","Forest’s owning iterator.","Iterators of <code>Tree</code>/<code>Forest</code>, returned by <code>iter()</code> or <code>iter_mut()</code>…","Iterators of <code>RcNode</code>, returned by <code>iter_rc()</code>.","Composed of <code>data</code> and a list of its child <code>Node</code>s.","Operator overloading of <code>-</code> and <code>/</code> for constructing tree …","Reference-counting nodes.","size of a tree/forest/node, including degree and …","Composed of a root <code>Node</code> and a list of its child <code>Node</code>s.","Traits for implementing tuple notations","Depth first search in <code>Tree</code>/<code>Node</code>/<code>Forest</code>.","Bfs iterator of either tree or forest.","Forest iterator for breadth first search.","Tree iterator for breadth first search.","","","","Split tree node into data item and children iter.","An iterator in breadth-first manner.","","Visit a node in breadth first search.","","","","","","","","","","","","","","","","","","","","Returns the iterator which iterates the forest nodes in …","","","","","","","","","","","","","","","","","","","","Returns the iterator in breadth-first search.","","","Returns the iterator and size infomation.","Takes a closure and creates another BfsTree which calls …","Takes a closure and creates another BfsForest which calls …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the iterator which iterates the tree nodes in …","","","","","","","","","","","","","","","","","","List of <code>Node</code>s as its children.","Add all the forest’s trees at back of children list","","Returns a mutable pointer to the last child of the forest,…","Provides a forward iterator in a breadth-first manner.","Provides a forward iterator with mutable references in a …","","","","","","","Returns the number of child nodes in <code>Forest</code>.","","","","","","","","","Construct forest from tuple notations.","Returns the first child of the forest, or <code>None</code> if it is …","Returns a mutable pointer to the first child of the …","Returns <code>true</code> if <code>Forest</code> is empty.","","","","Provides a forward iterator with owned data in a …","","Provides a forward iterator over child <code>Node</code>s.","Provides a forward iterator over child <code>Node</code>s with mutable …","","Makes an empty <code>Forest</code>.","Returns the number of all child nodes in <code>Forest</code>.","","Remove and return the first child.","Remove and return the first child.","","","","","Add all the forest’s trees at front of children list","Add the tree as the last child.","Add the tree as the first child.","","","","","","","","","","Forest’s owning iterator.","","","","","","","","","","","","","","","","","","An iterator over the child <code>Node</code>s of <code>Tree</code>, <code>Node</code> or <code>Forest</code>.","A mutable iterator over the child <code>Node</code>s of <code>Tree</code>, <code>Node</code> or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator over the child <code>Node</code>s of <code>RcNode</code> with shared …","","","","","","","","","","","","","","","","","","","","Composed of <code>data</code> and a list of its child <code>Node</code>s. Size …","Adds all the forest’s trees at back of children list.","Returns the last child of this node, or None if it has no …","Returns a mutable pointer to the last child of this node, …","Provides a forward iterator in a breadth-first manner.","Provides a forward iterator in a breadth-first manner, …","Provides a forward iterator with mutable references in a …","Provides a forward iterator with mutable references in a …","","","","Reference of its associated data.","Mutable reeference of its associated data.","Clones the node deeply and creates a new tree.","Clones the node’s descendant nodes as a forest.","","Returns the number of child nodes in <code>Node</code>.","","The subtree departs from its parent and becomes an …","","","","","Returns the first child of this node, or None if it has …","Returns a mutable pointer to the first child of this node,…","Returns <code>true</code> if <code>Node</code> has no child nodes.","","","Inserts sib tree after <code>self</code>. The newly inserted node will …","Inserts sib tree before <code>self</code>. The newly inserted node …","","Provides a forward iterator over child <code>Node</code>s","Provides a forward iterator over child <code>Node</code>s with mutable …","","Returns the number of all child nodes in <code>Node</code>, including …","Returns the parent node of this node, or None if it is …","","Removes and return the last child.","Removes and return the first child.","","","","","Adds all the forest’s trees at front of children list.","Adds the tree as the last child.","Adds the tree as the first child.","","","","","<code>fr</code> stands for <code>Forest</code>","<code>tr</code> stands for <code>Tree</code>","","","Reference-counting node which stored contiguously.","Non-owning reference-counting node which stored …","Reference-counting node.","","","Reference-counting node which stored scatteredly.","Non-owning reference-counting node which stored …","Non-owning reference-counting node.","Adds all the forest’s trees at back of children list.","Returns the last child of the tree, or None if it is …","","","","","","","","","","","","","","","","Dynamically borrows the node’s data.","Mutably borrows the node’s data.","Clones the node deeply and creates a new tree.","Returns the number of subtrees.","","","","","","","The subtree departs from its parent and becomes an …","Creates a new weak pointer to this node.","","","","","","","","","","","","","","Returns the first child of the tree, or None if it is …","Returns <code>true</code> if this <code>Node</code> has no child node, otherwise …","","","","","","","","Inserts sib tree after <code>self</code>. The newly inserted node will …","Inserts sib tree before <code>self</code>. The newly inserted node …","","","","","","","Converts to a tree which disables reference-counting.","Checks if it is a root node.","Provides a forward iterator over child <code>Node</code>s, with shared …","","Obtains a node reference","Returns the number of all subnodes, including itself.","Obtains a mutable node reference","Returns the parent node of this node, or None if it is …","","Removes and return the last child.","Removes and return the first child.","","","","","","","","","","","","","","","","","","","","","","","","","Adds all the forest’s trees at front of children list.","Adds the tree as the last child.","Adds the tree as the first child.","","","","","","","","","","","","","","","","","","","","","Attempts to upgrade the <code>WeakNode</code> a <code>RcNode</code>, delaying …","A struct keeping the node’s children count and all its …","","","","","","","","","","","","","","","","","","","","","","","","","","","Composed of a root <code>Node</code> and a list of its child <code>Node</code>s.","Removes and returns the given <code>Tree</code>’s children.","Adds all the forest’s trees at back of children list.","Returns a mutable reference to the last child of this …","Provides a forward iterator with mutable references in a …","Provides a forward iterator with mutable references in a …","","","","","","","","","","","","","","","","","","","","Constructs tree from tuple notations.","Returns a mutable reference to the first child of this …","","","","Provides a forward iterator with owned data in a …","","Provides a forward iterator over child <code>Node</code>s with mutable …","","","Creates a <code>Tree</code> containing only root node associated with …","","Removes and returns the last child.","Removes and returns the first child.","","","","","Adds all the forest’s trees at front of children list.","Adds the tree as the last child.","Adds the tree as the first child.","Reference of the root node.","Mutable reference of the root node.","","","","","","","","","","","","","","For tuple notations to construct <code>Forest</code>.","For tuple notations to construct <code>Tree</code>.","Visit one node in tree/forest building process, using …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Depth first search in forest.","","Depth first search in tree.","Distinguish between visiting a leaf node and (begin/end …","","","","","","","","","","","","","","","Depth first search on <code>TreeWalk</code>. Preorder or postorder at …","Depth first search on <code>ForestWalk</code>. Preorder or postorder …","","","","","","Returns the current node in the tree traversal, or <code>None</code> …","Returns the current node in the forest traversal, or <code>None</code> …","Returns the parent of current node, or <code>None</code> if it has no …","Returns the parent of current node, or <code>None</code> if it has no …","","","","","","","","Advance the cursor and return the newly visited node.","Advances the cursor and return the newly visited node.","Returns the node under visit, regardless of whether it is …","","","","","","","","","","","","","Revisits a <code>Node</code> that reached <code>Visit::End</code>. No effect on …","Revisits a <code>Node</code> that reached <code>Visit::End</code>. No effect on …","Sets the cursor to the current node’s <code>n</code>-th child and …","Sets the cursor to the current node’s <code>n</code>-th child and …","","Set the cursor to the current node’s parent and returns …","Sets the cursor to the current node’s parent and …","Sets the cursor to the current node’s next <code>n</code>-th sibling …","Sets the cursor to the current node’s next <code>n</code>-th sibling …","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,0,0,1,0,3,4,1,5,6,3,4,1,5,6,5,3,4,1,5,6,5,5,6,1,3,3,4,4,1,5,6,6,3,4,1,5,6,3,4,1,5,6,6,1,3,4,1,3,4,5,6,3,4,1,5,6,3,4,1,5,6,3,4,1,5,6,3,4,1,5,6,3,4,5,2,1,3,4,1,5,6,3,4,1,5,6,3,4,1,5,6,3,4,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,9,10,9,10,9,10,9,10,9,10,9,10,9,10,9,10,9,10,9,10,9,10,9,10,9,10,9,10,9,10,9,10,9,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,13,14,0,0,0,13,14,0,0,0,13,13,15,16,13,17,18,14,15,16,13,17,18,14,13,13,13,13,13,13,13,15,16,13,17,18,14,13,13,13,14,13,13,13,13,15,16,13,13,17,18,14,13,13,13,15,16,13,17,18,14,13,13,15,16,13,17,18,14,13,13,13,13,13,13,13,13,13,13,13,15,16,13,17,18,14,15,16,13,17,18,14,15,16,13,17,18,14,15,16,13,17,18,14,13,13,13,13,13,15,16,13,17,18,14,15,16,13,17,18,14,15,16,13,17,18,14,14,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,22,23,0,0,0,21,21,21,21,21,22,23,21,21,21,21,21,22,23,21,21,21,21,22,23,21,22,23,21,22,23,21,22,23,21,21,21,21,21,24,24,0,24,0,0,25,24,26,25,24,26,24,24,26,25,24,26,24,24,25,26,25,25,24,26,26,25,26,25,26,25,24,26,25,24,26,24,25,26,24,25,24,26,25,24,26,25,24,26,25,24,26,25,26,25,26,24,25,26,25,26,25,24,26,25,24,26,25,24,26],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["visit",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[],["option",4]],[[["size",3]]],[[]],[[]],[[["size",3]]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[],["bfstree",3]],[[],["bfsforest",3]],[[["visit",3]],["bool",15]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bfs",4]],[[],["bfs",4]],null,[[["forest",3]]],[[],[["option",4],["node",3]]],[[],[["option",4],["pin",3]]],[[],[["splitted",3],["bfsforest",3]]],[[],[["splitted",3],["bfsforest",3]]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[]],[[],["usize",15]],[[["usize",15]],["usize",15]],[[]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["bfsforest",3]]],[[["forestwalk",3]]],[[]],[[]],[[],[["option",4],["node",3]]],[[],[["option",4],["pin",3]]],[[],["bool",15]],[[]],[[],["usize",15]],[[]],[[["forest",3]],[["bfsforest",3],["splitted",3]]],[[],["intoiter",3]],[[],["iter",3]],[[],["itermut",3]],[[],["bool",15]],[[],["forest",3]],[[],["usize",15]],[[],[["ordering",4],["option",4]]],[[],[["option",4],["tree",3]]],[[],[["option",4],["tree",3]]],[[]],[[]],[[]],[[]],[[["forest",3]]],[[["tree",3]]],[[["tree",3]]],[[["tree",3]]],[[["tree",3]]],[[["forest",3]]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[["usize",15]],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[],[["option",4],["tree",3]]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[["usize",15]],["usize",15]],[[]],[[],["usize",15]],[[]],[[]],[[],[["option",4],["rcnode",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["forest",3]]],[[],[["option",4],["node",3]]],[[],[["option",4],["pin",3]]],[[],[["bfstree",3],["splitted",3]]],[[],[["splitted",3],["bfsforest",3]]],[[],[["splitted",3],["bfsforest",3]]],[[],[["bfstree",3],["splitted",3]]],[[]],[[]],[[],["ordering",4]],[[]],[[]],[[],["tree",3]],[[],["forest",3]],[[]],[[],["usize",15]],[[["usize",15]],["usize",15]],[[],["tree",3]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],[["option",4],["node",3]]],[[],[["option",4],["pin",3]]],[[],["bool",15]],[[]],[[],["usize",15]],[[["tree",3]]],[[["tree",3]]],[[]],[[],["iter",3]],[[],["itermut",3]],[[],["bool",15]],[[],["usize",15]],[[],[["option",4],["node",3]]],[[],[["ordering",4],["option",4]]],[[],[["option",4],["tree",3]]],[[],[["option",4],["tree",3]]],[[]],[[]],[[]],[[]],[[["forest",3]]],[[["tree",3]]],[[["tree",3]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["forest",3]],[[],["tree",3]],null,null,null,null,null,null,null,null,null,null,[[["forest",3]]],[[],[["option",4],["rcnode",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["rcnode",4]],[[]],[[],["ordering",4]],[[],["ref",3]],[[],["refmut",3]],[[],["tree",3]],[[],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[]],[[],["weaknode",4]],[[]],[[]],[[],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["tree",3]]],[[]],[[]],[[]],[[]],[[],[["option",4],["rcnode",4]]],[[],["bool",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[["tree",3]]],[[["tree",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["tree",3]],[[],["bool",15]],[[],["iterrc",3]],[[],["bool",15]],[[],[["node",3],["ref",3]]],[[],["usize",15]],[[],[["node",3],["refmut",3]]],[[],[["option",4],["rcnode",4]]],[[],[["ordering",4],["option",4]]],[[],[["option",4],["rcnode",4]]],[[],[["option",4],["rcnode",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["forest",3]]],[[["tree",3]]],[[["tree",3]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],[["option",4],["rcnode",4]]],null,[[]],[[]],[[]],[[]],[[],["size",3]],[[]],[[],["size",3]],null,[[["usize",15]],["usize",15]],null,[[["size",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[]],[[["size",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],["forest",3]],[[["forest",3]]],[[],[["option",4],["pin",3]]],[[],[["splitted",3],["bfsforest",3]]],[[],[["bfstree",3],["splitted",3]]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[]],[[["usize",15]],["usize",15]],[[],["tree",3]],[[["tree",3]],["tree",3]],[[["tree",3]],["tree",3]],[[["forest",3]],["tree",3]],[[["forest",3]],["tree",3]],[[]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["treewalk",3]]],[[["bfstree",3]]],[[]],[[]],[[],[["option",4],["pin",3]]],[[]],[[],["usize",15]],[[]],[[],[["splitted",3],["bfstree",3]]],[[],["intoiter",3]],[[],["itermut",3]],[[],["bool",15]],[[],["forest",3]],[[],["tree",3]],[[],[["ordering",4],["option",4]]],[[],[["option",4],["tree",3]]],[[],[["option",4],["tree",3]]],[[]],[[]],[[]],[[]],[[["forest",3]]],[[["tree",3]]],[[["tree",3]]],[[],["node",3]],[[],[["node",3],["pin",3]]],[[]],[[["tree",3]],["forest",3]],[[],["forest",3]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,[[]],[[]],[[],["visit",4]],[[]],[[["visit",4]],["ordering",4]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["visit",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[["visit",4]],["bool",15]],[[["visit",4]],[["option",4],["ordering",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["visit",4]],[[]],[[],["forestwalk",3]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["visit",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["tree",3]]],[[]],[[]],[[]],[[["forest",3]]],[[],[["visit",4],["option",4]]],[[],[["visit",4],["option",4]]],[[],[["option",4],["node",3]]],[[],[["option",4],["node",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[["visit",4]],["bool",15]],[[],[["visit",4],["option",4]]],[[],[["visit",4],["option",4]]],[[],["node",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]],[["visit",4],["option",4]]],[[["usize",15]],[["visit",4],["option",4]]],[[]],[[],[["visit",4],["option",4]]],[[],[["visit",4],["option",4]]],[[["usize",15]],[["visit",4],["option",4]]],[[["usize",15]],[["visit",4],["option",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Bfs"],[8,"Split"],[3,"BfsTree"],[3,"BfsForest"],[3,"Visit"],[3,"Splitted"],[3,"Forest"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"IterRc"],[3,"Node"],[4,"RcNode"],[4,"WeakNode"],[3,"ScatteredRcNode"],[3,"PiledRcNode"],[3,"ScatteredWeakNode"],[3,"PiledWeakNode"],[3,"Size"],[3,"Tree"],[4,"Visit"],[8,"TupleTree"],[8,"TupleForest"],[4,"Visit"],[3,"TreeWalk"],[3,"ForestWalk"]]},\
"unicode_segmentation":{"doc":"Iterators which split strings on Grapheme Cluster, Word …","t":[3,4,3,3,13,13,13,13,17,3,3,3,3,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10],"n":["GraphemeCursor","GraphemeIncomplete","GraphemeIndices","Graphemes","InvalidOffset","NextChunk","PreContext","PrevChunk","UNICODE_VERSION","USentenceBoundIndices","USentenceBounds","UWordBoundIndices","UWordBounds","UnicodeSegmentation","UnicodeSentences","UnicodeWordIndices","UnicodeWords","as_str","as_str","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","cur_cursor","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","grapheme_indices","graphemes","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_boundary","ne","new","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_boundary","prev_boundary","provide_context","set_cursor","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","split_sentence_bound_indices","split_sentence_bounds","split_word_bound_indices","split_word_bounds","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode_sentences","unicode_word_indices","unicode_words"],"q":["unicode_segmentation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Cursor-based segmenter for grapheme clusters.","An error return indicating that not enough content was …","External iterator for grapheme clusters and byte offsets.","External iterator for a string’s grapheme clusters.","An error returned when the chunk given does not contain …","When requesting <code>next_boundary</code>, the cursor is moving past …","More pre-context is needed. The caller should call …","When requesting <code>prev_boundary</code>, the cursor is moving past …","The version of Unicode that this version of …","External iterator for sentence boundaries and byte …","External iterator for a string’s sentence boundaries.","External iterator for word boundaries and byte offsets.","External iterator for a string’s word boundaries.","Methods for segmenting strings according to Unicode …","An iterator over the substrings of a string which, after …","An iterator over the substrings of a string which, after …","An iterator over the substrings of a string which, after …","View the underlying data (the part yet to be iterated) as …","View the underlying data (the part yet to be iterated) as …","View the underlying data (the part yet to be iterated) as …","View the underlying data (the part yet to be iterated) as …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The current offset of the cursor. Equal to the last value …","","","","","","","","","","","","","","","","Returns an iterator over the grapheme clusters of <code>self</code> …","Returns an iterator over the grapheme clusters of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","Determine whether the current cursor location is a …","","Create a new cursor. The string and initial offset are …","","","","","","","","","","","","","","","","Find the next boundary after the current cursor position. …","Find the previous boundary after the current cursor …","Provide additional pre-context when it is needed to …","Set the cursor to a new location in the same string.","","","","","","","Returns an iterator over substrings of <code>self</code>, split on …","Returns an iterator over substrings of <code>self</code> separated on …","Returns an iterator over substrings of <code>self</code>, split on …","Returns an iterator over substrings of <code>self</code> separated on …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over substrings of <code>self</code> separated on …","Returns an iterator over the words of <code>self</code>, separated on …","Returns an iterator over the words of <code>self</code>, separated on …"],"i":[0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,2,3,4,5,6,7,2,3,8,1,9,10,11,4,5,6,7,2,3,8,1,9,10,11,4,5,2,3,8,9,10,11,4,5,8,1,3,8,1,6,7,2,3,8,1,9,10,11,4,5,12,12,6,7,2,3,8,1,9,10,11,4,5,6,7,2,3,9,10,11,4,5,8,1,8,6,7,2,3,9,10,11,4,5,6,7,2,3,4,5,8,8,8,8,2,3,10,11,4,5,12,12,12,12,6,7,2,3,8,1,9,10,11,4,5,6,7,2,3,8,1,9,10,11,4,5,6,7,2,3,8,1,9,10,11,4,5,12,12,12],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],[[],["str",15]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["graphemeindices",3]],[[],["graphemes",3]],[[],["graphemecursor",3]],[[],["unicodesentences",3]],[[],["usentencebounds",3]],[[],["usentenceboundindices",3]],[[],["uwordbounds",3]],[[],["uwordboundindices",3]],[[],["usize",15]],[[["graphemeincomplete",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bool",15]],["graphemeindices",3]],[[["bool",15]],["graphemes",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15],["str",15]],[["bool",15],["result",4],["graphemeincomplete",4]]],[[["graphemeincomplete",4]],["bool",15]],[[["usize",15],["bool",15]],["graphemecursor",3]],[[],[["option",4],["str",15]]],[[],["option",4]],[[],["option",4]],[[],[["option",4],["str",15]]],[[],[["option",4],["str",15]]],[[],[["option",4],["str",15]]],[[],["option",4]],[[],[["option",4],["str",15]]],[[],["option",4]],[[],[["option",4],["str",15]]],[[],["option",4]],[[],["option",4]],[[],[["option",4],["str",15]]],[[],[["option",4],["str",15]]],[[],["option",4]],[[["usize",15],["str",15]],[["graphemeincomplete",4],["result",4],["option",4]]],[[["usize",15],["str",15]],[["graphemeincomplete",4],["result",4],["option",4]]],[[["usize",15],["str",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usentenceboundindices",3]],[[],["usentencebounds",3]],[[],["uwordboundindices",3]],[[],["uwordbounds",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["unicodesentences",3]],[[],["unicodewordindices",3]],[[],["unicodewords",3]]],"p":[[4,"GraphemeIncomplete"],[3,"GraphemeIndices"],[3,"Graphemes"],[3,"UWordBounds"],[3,"UWordBoundIndices"],[3,"UnicodeWords"],[3,"UnicodeWordIndices"],[3,"GraphemeCursor"],[3,"UnicodeSentences"],[3,"USentenceBounds"],[3,"USentenceBoundIndices"],[8,"UnicodeSegmentation"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};