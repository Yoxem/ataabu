#lang racket

(define gensym 
  (let ((ini 1))
    (lambda ()
  (define return (string->symbol(string-append "sym" (number->string ini))))
  (set! ini (+ 1 ini))
  return)))

(define a '(lambda (x y) (+ (+ 1 2) (* 2 5))))



(define result '())

(define (find a result)
  (match a
    [`(lambda (,args ...) ,body) (let* ((new-var (gensym))
                                    (body-result  (find body result))
                                    (new-result  (append (second body-result) `([DEF ,new-var (LAMBDA ,args ,(first body-result))]))))
                                    `(,new-var ,new-result))
                                    ]
[(? pair?) (begin
               (let* ((new-var (gensym))
                      (_1st-result  (find (first a) result))
                      (_2nd-result  (find (second a) (second _1st-result)))
                      (_3rd-result (find (third a) (second _2nd-result)))
                      (new-a  new-var)
                      (new-result  (append (second _3rd-result) `([DEF ,new-var (,(car a) ,(first _2nd-result) ,(first _3rd-result))]))))
                 (display _3rd-result)
                 `(,new-a ,new-result)
               ))]
 [_ `(,a ,result)]))

(find a result)
